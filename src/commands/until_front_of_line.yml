parameters:
  consider-branch:
    type: boolean
    default: true
    description: "Should we only consider jobs running on the same branch?"
  consider-job:
    type: boolean
    # deprecated, do not use
    description: "Deprecated. Please see block-workflow."
    default: true
  block-workflow:
    type: boolean
    # this is false at COMMAND level as intention it to only block CURRENT job.
    default: false
    description: "If true, this job will block until no other workflows with an earlier timestamp are running. Typically used as first job."
  time:
    type: string
    default: "10"
    description: "How long to wait before giving up."
  dont-quit:
    type: boolean
    default: false
    description: "Quiting is for losers. Force job through once time expires instead of failing."
  only-on-branch:
    type: string
    default: "*"
    description: "Only queue on specified branch"
  vcs-type:
    type: string
    default: "github"
    description: "Override VCS to 'bitbucket' if needed."
steps:
  - run:
      name: Queue Until Front of Line
      command: |

        load_variables(){
          # just confirm our required variables are present
          : ${CIRCLE_BUILD_NUM:?"Required Env Variable not found!"}
          : ${CIRCLE_PROJECT_USERNAME:?"Required Env Variable not found!"}
          : ${CIRCLE_PROJECT_REPONAME:?"Required Env Variable not found!"}
          : ${CIRCLE_REPOSITORY_URL:?"Required Env Variable not found!"}
          : ${CIRCLE_JOB:?"Required Env Variable not found!"}
          # Only needed for private projects
          if [ -z "$CIRCLECI_API_KEY" ]; then
            echo "CIRCLECI_API_KEY not set. Private projects will be inaccessable."
          fi
          VCS_TYPE="<<parameters.vcs-type>>"
        }





        fetch_filtered_active_builds(){
          if [ "<<parameters.consider-branch>>" != "true" ];then
            echo "Orb parameter 'consider-branch' is false, will block previous builds on any branch."
            jobs_api_url_template="https://circleci.com/api/v1.1/project/${VCS_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}?circle-token=${CIRCLECI_API_KEY}&filter=running"
          else
            echo "Only blocking execution if running previous jobs on branch: ${CIRCLE_BRANCH}"
            : ${CIRCLE_BRANCH:?"Required Env Variable not found!"}
            jobs_api_url_template="https://circleci.com/api/v1.1/project/${VCS_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}?circle-token=${CIRCLECI_API_KEY}&filter=running"
          fi

          if [ ! -z $TESTING_MOCK_RESPONSE ] && [ -f $TESTING_MOCK_RESPONSE ];then
            echo "Using test mock response"
            cat $TESTING_MOCK_RESPONSE > /tmp/jobstatus.json
          else
            echo "Attempting to access CircleCI api. If the build process fails after this step, ensure your CIRCLECI_API_KEY is set."
            curl -f -s $jobs_api_url_template > /tmp/jobstatus.json
            echo "API access successful"
          fi
        }

        update_comparables(){     
          fetch_filtered_active_builds

          load_current_workflow_values

          # falsey parameters are empty strings, so always compare against 'true' 
          if [ "<<parameters.consider-job>>" != "true" ] || [ "<<parameters.block-workflow>>" = "true" ] ;then
            echo "Orb parameter block-workflow is true."
            echo "This job will block until no previous workflows have *any* jobs running."
            oldest_running_build_num=`jq 'sort_by(.queued_at)| .[0].build_num' /tmp/jobstatus.json`
            oldest_queue_time=`jq 'sort_by(.queued_at)| .[0].queued_at' /tmp/jobstatus.json`
          else
            echo "Orb parameter block-workflow is false."
            echo "Only blocking execution if running previous jobs matching this job: ${CIRCLE_JOB}"
            oldest_running_build_num=`jq ". | map(select(.build_parameters.CIRCLE_JOB==\"${CIRCLE_JOB}\")) | sort_by(.queued_at)|  .[0].build_num" /tmp/jobstatus.json`
            oldest_queue_time=`jq ". | map(select(.build_parameters.CIRCLE_JOB==\"${CIRCLE_JOB}\")) | sort_by(.queued_at)|  .[0].queued_at" /tmp/jobstatus.json`
          fi
          echo "Oldest job: $oldest"
          if [ -z $oldest_queue_time ];then
            echo "API Call for existing jobs failed, failing this build.  Please check API token"
            exit 1
          fi
        }

        load_current_workflow_values(){
           my_queue_time=`jq '.[] | select( .build_num == '"${CIRCLE_BUILD_NUM}"').queued_at' /tmp/jobstatus.json`

        }

        cancel_current_build(){
          echo "Cancelleing build ${CIRCLE_BUILD_NUM}"
          cancel_api_url_template="https://circleci.com/api/v1.1/project/${VCS_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/cancel?circle-token=${CIRCLECI_API_KEY}"
          curl -s -X POST $cancel_api_url_template > /dev/null
        }



        #
        # We can skip a few use cases without calling API
        #
        if [ ! -z "$CIRCLE_PR_REPONAME" ]; then
          echo "Queueing on forks is not supported. Skipping queue..."
          # It's important that we not fail here because it could cause issues on the main repo's branch
          exit 0
        fi
        if [ "<<parameters.only-on-branch>>" = "*" ] || [ "<<parameters.only-on-branch>>" = "${CIRCLE_BRANCH}" ]; then
          echo "${CIRCLE_BRANCH} queueable"
        else
          echo "Queueing only happens on <<parameters.only-on-branch>> branch, skipping queue"
          exit 0
        fi

        #
        # Set values that wont change while we wait
        # 
        load_variables
        max_time=<<parameters.time>>
        echo "This build will block until all previous builds complete."
        echo "Max Queue Time: ${max_time} minutes."
        wait_time=0
        loop_time=11
        max_time_seconds=$((max_time * 60))
       
        #
        # Queue Loop
        #
        while true; do
          update_comparables
          echo "This Workflow Timestamp: $my_queue_time"
          echo "Oldest Workflow Timestamp: $oldest_queue_time"
          if [[ "$oldest_queue_time" > "$my_queue_time" ]] || [[ "$oldest_queue_time" = "$my_queue_time" ]] ; then
            # API returns Y-M-D HH:MM (with 24 hour clock) so alphabetical stirng compare is accurate to timestamp compare as wel
            # in event of race, everyone wins
            echo "Front of the line, WooHoo!, Build continuing"
            break
          else
            echo "This build (${CIRCLE_BUILD_NUM}) is queued, waiting for build number (${oldest_running_build_num}) to complete."
            echo "Total Queue time: ${wait_time} seconds."
          fi

          if [ $wait_time -ge $max_time_seconds ]; then
            echo "Max wait time exceeded, considering response."
            if [ "<<parameters.dont-quit>>" == "true" ];then
              echo "Orb parameter dont-quit is set to true, letting this job proceed!"
              exit 0
            else
              cancel_current_build
              sleep 10 #waut for APi to cancel this job, rather than showing as failure
              exit 1 # but just in case, fail job
            fi
          fi

          sleep $loop_time
          wait_time=$(( loop_time + wait_time ))
        done
